/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rapifood.vistas;

import java.sql.Date;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import rapifood.modelo.Conexion;
import rapifood.modelo.Mesa;
import rapifood.modelo.MesaData;

/**
 *
 * @author Fedep
 */
public class Calendario extends javax.swing.JFrame {

    private boolean isAgregar;
    private Conexion con;
    private MesaData mesaData;
    private int idAModificar;
    private boolean isModificar;
    
    public void setIsAgregar(boolean isAgregar){
        this.isAgregar = isAgregar;
    }
    
    public void setIsModificar(boolean isModificar){
        this.isModificar=isModificar;
    }
    
    public void setIdAModificar(int idAModificar){
        this.idAModificar=idAModificar;
    }
    
    /**
     * Creates new form AdmCalendar
     */
    
    public Calendario() {
        initComponents();
        inicializarComponentes();
        this.setLocationRelativeTo(null);

        //VARIABLE DEL TIPO DATE CON LA FECHA ACTUAL + 1 DIA. DADA LA REALIDAD, NOSOTROS OPTAMOS POR SIEMPRE RESERVAR A PARTIR DEL SIGUIENTE DIA AL ACTUAL.
        Date date = Date.valueOf(LocalDate.now().plusDays(1));
        dcFechaReserva.setMinSelectableDate(date);
        bgOpciones.setSelected(rbFecha.getModel(), true);
    }
    
    private void inicializarComponentes(){
        con = new Conexion();
        mesaData = new MesaData(con);
        isAgregar=false;
        isModificar=false;
    }
    
    public void inicializar(){
        if(isAgregar || isModificar){
            rbFecha.setVisible(false);
            rbMesa.setVisible(false);
            cbMesas.setVisible(false);
        }
        else{
            cbMesas.setEnabled(false);
            dcFechaReserva.setEnabled(true);
            List<Mesa> mesasDisponibles = mesaData.obtenerMesas();
            for(Mesa mesa : mesasDisponibles){
                if(mesa.isEstado()){
                    cbMesas.addItem(String.valueOf(mesa.getId()));
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgOpciones = new javax.swing.ButtonGroup();
        jbAceptar = new javax.swing.JButton();
        rbFecha = new javax.swing.JRadioButton();
        rbMesa = new javax.swing.JRadioButton();
        cbMesas = new javax.swing.JComboBox<>();
        jbBack = new javax.swing.JButton();
        jlFecha = new javax.swing.JLabel();
        dcFechaReserva = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jbAceptar.setText("Aceptar");
        jbAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAceptarActionPerformed(evt);
            }
        });

        bgOpciones.add(rbFecha);
        rbFecha.setText("Buscar por fecha");
        rbFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFechaActionPerformed(evt);
            }
        });

        bgOpciones.add(rbMesa);
        rbMesa.setText("Buscar por mesa");
        rbMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMesaActionPerformed(evt);
            }
        });

        jbBack.setText("Volver al menu");
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });

        jlFecha.setText("Ingrese una fecha:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbMesa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(rbFecha))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbBack, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jlFecha)
                    .addComponent(cbMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcFechaReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMesa)
                    .addComponent(rbFecha))
                .addGap(18, 18, 18)
                .addComponent(cbMesas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(dcFechaReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAceptar)
                    .addComponent(jbBack))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAceptarActionPerformed
        Calendar fechaElegida = dcFechaReserva.getCalendar();
        if(isAgregar){
            //SI HAY FECHA INGRESADA.
            if(dcFechaReserva.getDate() == null){
                JOptionPane.showMessageDialog(this, "Ingresar una fecha.");
            }
            else{
                fechaElegida.set(Calendar.HOUR, 0);
                fechaElegida.set(Calendar.MINUTE, 0);
                fechaElegida.set(Calendar.SECOND, 0);
                fechaElegida.set(Calendar.MILLISECOND, 0);
                //SE ENVIA LA FECHA ELEGIDA AL PANEL DE LOS HORARIOS.
                HorariosDisponibles pruebaHorarios = new HorariosDisponibles();
                pruebaHorarios.setFechaElegida(fechaElegida);
                this.setVisible(false);
                pruebaHorarios.setVisible(true); 
            }
        }
        else if(isModificar){
            //SI HAY FECHA INGRESADA.
            if(dcFechaReserva.getDate() == null){
                JOptionPane.showMessageDialog(this, "Ingresar una fecha.");
            }
            else{
                fechaElegida.set(Calendar.HOUR, 0);
                fechaElegida.set(Calendar.MINUTE, 0);
                fechaElegida.set(Calendar.SECOND, 0);
                fechaElegida.set(Calendar.MILLISECOND, 0);
                //SE ENVIA LA FECHA ELEGIDA AL PANEL DE LOS HORARIOS.
                HorariosDisponibles horarios = new HorariosDisponibles();
                horarios.setFechaElegida(fechaElegida);
                horarios.setIsModificar(true);
                horarios.setIdAModificar(idAModificar);
                this.setVisible(false);
                horarios.setVisible(true); 
            } 
        }
        else{
            BorrarReserva pruebaBorradoReservas = new BorrarReserva();
            if(rbFecha.isSelected()){
                if(dcFechaReserva.getDate() == null){
                JOptionPane.showMessageDialog(this, "Ingresar una fecha.");
                }
                else{
                   pruebaBorradoReservas.setFechaElegida(fechaElegida);
                   pruebaBorradoReservas.setIsFecha(true); 
                   this.setVisible(false);
                   pruebaBorradoReservas.setVisible(true);
                   pruebaBorradoReservas.inicializar();  
                }
            }
            else{
                pruebaBorradoReservas.setId_mesa(Integer.parseInt(cbMesas.getSelectedItem().toString()));
                pruebaBorradoReservas.setIsFecha(false);
                this.setVisible(false);
                pruebaBorradoReservas.setVisible(true);
                pruebaBorradoReservas.inicializar(); 
            }
        }
    }//GEN-LAST:event_jbAceptarActionPerformed

    private void rbMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMesaActionPerformed
        jlFecha.setVisible(false);
        dcFechaReserva.setEnabled(false);
        cbMesas.setEnabled(true);
    }//GEN-LAST:event_rbMesaActionPerformed

    private void rbFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFechaActionPerformed
        jlFecha.setVisible(true);
        dcFechaReserva.setEnabled(true);
        cbMesas.setEnabled(false);
    }//GEN-LAST:event_rbFechaActionPerformed

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed
        this.setVisible(false);
        new AdministradorLogueado().setVisible(true);
    }//GEN-LAST:event_jbBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calendario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgOpciones;
    private javax.swing.JComboBox<String> cbMesas;
    private com.toedter.calendar.JDateChooser dcFechaReserva;
    private javax.swing.JButton jbAceptar;
    private javax.swing.JButton jbBack;
    private javax.swing.JLabel jlFecha;
    private javax.swing.JRadioButton rbFecha;
    private javax.swing.JRadioButton rbMesa;
    // End of variables declaration//GEN-END:variables
}
