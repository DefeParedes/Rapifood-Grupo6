/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rapifood.vistas;

import java.awt.Component;
import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import rapifood.modelo.Conexion;
import rapifood.modelo.DetallePedido;
import rapifood.modelo.DetallePedidoData;
import rapifood.modelo.Mesa;
import rapifood.modelo.MesaData;
import rapifood.modelo.Mesero;
import rapifood.modelo.MeseroData;
import rapifood.modelo.Pedido;
import rapifood.modelo.PedidoData;
import rapifood.modelo.Producto;
import rapifood.modelo.ProductoData;


/**
 *
 * @author Fedep
 */
public class AgregarPedido extends javax.swing.JFrame {

    private Conexion con;
    private MesaData mesaData;
    private MeseroData meseroData;
    private ProductoData productoData;
    private PedidoData pedidoData;
    private DetallePedidoData detallePedidoData;
    private int idAModificar;
    private boolean isModificar;
    DefaultTableModel modeloProductos;
    DefaultTableModel modeloProductosAgregados;
    private double total=0;
    

    @Override
    public void setLocationRelativeTo(Component cmpnt) {
        super.setLocationRelativeTo(cmpnt); //To change body of generated methods, choose Tools | Templates.
    }
    /**
     * Creates new form PruebaAgregarPedido
     */
    public AgregarPedido() {
        initComponents();
        this.setLocationRelativeTo(null);
        inicializarComponentes();
    }

    public void setIdAModificar(int idAModificar) {
        this.idAModificar = idAModificar;
    }

    public void setIsModificar(boolean isModificar) {
        this.isModificar = isModificar;
    }
    
    private void inicializarComponentes(){
        con = new Conexion();
        mesaData = new MesaData(con);
        meseroData = new MeseroData(con);
        productoData = new ProductoData(con);
        pedidoData = new PedidoData(con);
        detallePedidoData = new DetallePedidoData(con);
        
        modeloProductos = (DefaultTableModel) jtProductos.getModel();
        modeloProductosAgregados = (DefaultTableModel) jtProductosSeleccionados.getModel();
        
        isModificar=false;
        
        cargarMesas();
        cargarMeseros();
        cargarProductos();
    }
    
    private void cargarMesas(){
        for(Mesa mesa : mesaData.obtenerMesas()){
            if(mesa.isEstado()){
                cbMesas.addItem(String.valueOf(mesa.getId()));
            }
        }
    }
    
    private void cargarMeseros(){
        for(Mesero mesero : meseroData.obtenerMeseros()){
            cbMeseros.addItem(mesero.getNombre());
        }
    }
    
    private void cargarProductos(){
        for(Producto producto : productoData.obtenerProductosActivos()){
            modeloProductos.addRow(new Object[]{producto.getNombre(),producto.getPrecio(),producto.getId()});
        }
    }
    
    private void volverAlMenu(){
        new AdministradorLogueado().setVisible(true);
        this.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbMesa = new javax.swing.JLabel();
        cbMesas = new javax.swing.JComboBox<>();
        jlMesero = new javax.swing.JLabel();
        cbMeseros = new javax.swing.JComboBox<>();
        jbAgregarProducto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProductosSeleccionados = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtProductos = new javax.swing.JTable();
        jlTotal = new javax.swing.JLabel();
        jl$ = new javax.swing.JLabel();
        jlTotalProductos = new javax.swing.JLabel();
        jbBorrarProducto = new javax.swing.JButton();
        jbFinalizar = new javax.swing.JButton();
        jbBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agregar Pedido");
        setResizable(false);

        jbMesa.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbMesa.setText("Mesa: ");

        jlMesero.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jlMesero.setText("Mesero: ");

        jbAgregarProducto.setText("Agregar producto");
        jbAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAgregarProductoActionPerformed(evt);
            }
        });

        jtProductosSeleccionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio", "Cantidad", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtProductosSeleccionados.setEnabled(false);
        jScrollPane1.setViewportView(jtProductosSeleccionados);

        jtProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Precio", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtProductos);

        jlTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlTotal.setText("Total: ");

        jl$.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jl$.setText("$");

        jbBorrarProducto.setText("Borrar producto");
        jbBorrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarProductoActionPerformed(evt);
            }
        });

        jbFinalizar.setText("Finalizar pedido");
        jbFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinalizarActionPerformed(evt);
            }
        });

        jbBack.setText("Volver al menu");
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jlMesero)
                                            .addComponent(jbMesa))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbMeseros, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jbAgregarProducto)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jbBorrarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jlTotal)
                                .addGap(2, 2, 2)
                                .addComponent(jl$)
                                .addGap(124, 124, 124)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlTotalProductos)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbFinalizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbBack)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jlTotalProductos))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbMesa)
                            .addComponent(cbMesas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlMesero)
                            .addComponent(cbMeseros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbAgregarProducto)
                            .addComponent(jbBorrarProducto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlTotal)
                            .addComponent(jl$))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbFinalizar)
                    .addComponent(jbBack))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAgregarProductoActionPerformed
        boolean control=true;
        if(jtProductos.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this, "Ingrese un producto a agregar.");
        }
        else{
            for (int i = 0; i < jtProductosSeleccionados.getRowCount(); i++) {
            if(jtProductosSeleccionados.getValueAt(i, 3) == jtProductos.getValueAt(jtProductos.getSelectedRow(), 2)){
                jtProductosSeleccionados.setValueAt(Integer.parseInt(jtProductosSeleccionados.getValueAt(i,2).toString())+1,i,2);
                control=false;
                total+=Double.parseDouble(jtProductos.getValueAt(jtProductos.getSelectedRow(),1).toString());
            }
        }
        if(control){
            String nombre = jtProductos.getValueAt(jtProductos.getSelectedRow(), 0).toString();
            Double precio = Double.parseDouble(jtProductos.getValueAt(jtProductos.getSelectedRow(), 1).toString());
            int id = Integer.parseInt(jtProductos.getValueAt(jtProductos.getSelectedRow(), 2).toString());
            modeloProductosAgregados.addRow(new Object[]{nombre,precio,1,id});
            total += precio;
        }
        jlTotalProductos.setText(String.valueOf(total)); 
        }
    }//GEN-LAST:event_jbAgregarProductoActionPerformed

    private void jbBorrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarProductoActionPerformed
        boolean control=false;
        if(jtProductos.getSelectedRow()==-1){
            JOptionPane.showMessageDialog(this, "Ingrese un producto a agregar.");
        }
        else{
            if(jtProductosSeleccionados.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "No ha pedido ningun producto.");
            }
            else{
                for (int i = 0; i < jtProductosSeleccionados.getRowCount(); i++) {
                    control=false;
                    if(Integer.parseInt(jtProductosSeleccionados.getValueAt(i, 3).toString()) == Integer.parseInt(jtProductos.getValueAt(jtProductos.getSelectedRow(), 2).toString())){
                        if(jtProductosSeleccionados.getValueAt(i, 3) == jtProductos.getValueAt(jtProductos.getSelectedRow(), 2)){
                            jtProductosSeleccionados.setValueAt(Integer.parseInt(jtProductosSeleccionados.getValueAt(i,2).toString())-1,i,2);
                            total-=Double.parseDouble(jtProductos.getValueAt(jtProductos.getSelectedRow(),1).toString());
                            if(Integer.parseInt(jtProductosSeleccionados.getValueAt(i,2).toString())==0){
                                modeloProductosAgregados.removeRow(i);
                            }
                        }  
                    }
                    else{
                        control=true;
                    }
                }
                if(control){
                    JOptionPane.showMessageDialog(this, "No hay ningun producto del producto seleccionado");
                }
            jlTotalProductos.setText(String.valueOf(total)); 
            }
        }
           
    }//GEN-LAST:event_jbBorrarProductoActionPerformed

    private void jbFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinalizarActionPerformed
        List<Producto> productos = new ArrayList<>();
        Mesero meseroSeleccionado = null;
        if(isModificar){
            if(jtProductosSeleccionados.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Debe ingresar por lo menos un producto.");
            }
            else{
                for(Mesero mesero : meseroData.obtenerMeseros()){
                    if(mesero.getNombre().equals(cbMeseros.getSelectedItem().toString())){
                    meseroSeleccionado = mesero;
                    }
                }
                Mesa mesa = mesaData.buscarMesa(Integer.parseInt(cbMesas.getSelectedItem().toString()));
                double monto = total;
                for(int i=0;i<jtProductosSeleccionados.getRowCount();i++){
                    for(int j=0;j<Integer.parseInt(jtProductosSeleccionados.getValueAt(i, 2).toString());j++){
                        productos.add(productoData.buscarProducto(Integer.parseInt(jtProductosSeleccionados.getValueAt(i, 3).toString())));
                    }
                }
                Date fechaPedido = Date.valueOf(LocalDate.now());
                Pedido pedido = new Pedido(idAModificar,mesa,meseroSeleccionado,monto,true,fechaPedido);
                pedidoData.actualizarPedido(pedido);
                for(DetallePedido detalle : detallePedidoData.obtenerDetallesPedidos()){
                    if(detalle.getPedido().getId() == idAModificar){
                        detallePedidoData.borrarDetallePedido(detalle.getId());
                    }
                }
                for(Producto producto : productos){
                    DetallePedido detalle = new DetallePedido(pedido,producto);
                    detallePedidoData.guardarDetallePedido(detalle);
                }
                JOptionPane.showMessageDialog(this, "Pedido realizado correctamente.");
                volverAlMenu();
            }
        }
        else{
            if(jtProductosSeleccionados.getRowCount()==0){
                JOptionPane.showMessageDialog(this, "Debe ingresar por lo menos un producto.");
            }
            else{
                for(Mesero mesero : meseroData.obtenerMeseros()){
                    if(mesero.getNombre().equals(cbMeseros.getSelectedItem().toString())){
                    meseroSeleccionado = mesero;
                    }
                }
                Mesa mesa = mesaData.buscarMesa(Integer.parseInt(cbMesas.getSelectedItem().toString()));
                double monto = total;
                for(int i=0;i<jtProductosSeleccionados.getRowCount();i++){
                    for(int j=0;j<Integer.parseInt(jtProductosSeleccionados.getValueAt(i, 2).toString());j++){
                        productos.add(productoData.buscarProducto(Integer.parseInt(jtProductosSeleccionados.getValueAt(i, 3).toString())));
                    }
                }
                Date fechaPedido = Date.valueOf(LocalDate.now());
                Pedido pedido = new Pedido(mesa,meseroSeleccionado,monto,true,fechaPedido);
                pedidoData.guardarPedido(pedido);
                for(Producto producto : productos){
                    DetallePedido detalle = new DetallePedido(pedido,producto);
                    detallePedidoData.guardarDetallePedido(detalle);
                }
                JOptionPane.showMessageDialog(this, "Pedido realizado correctamente.");
                volverAlMenu();
            }
        }
    }//GEN-LAST:event_jbFinalizarActionPerformed

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed
        volverAlMenu();
    }//GEN-LAST:event_jbBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarPedido().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbMesas;
    private javax.swing.JComboBox<String> cbMeseros;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAgregarProducto;
    private javax.swing.JButton jbBack;
    private javax.swing.JButton jbBorrarProducto;
    private javax.swing.JButton jbFinalizar;
    private javax.swing.JLabel jbMesa;
    private javax.swing.JLabel jl$;
    private javax.swing.JLabel jlMesero;
    private javax.swing.JLabel jlTotal;
    private javax.swing.JLabel jlTotalProductos;
    private javax.swing.JTable jtProductos;
    private javax.swing.JTable jtProductosSeleccionados;
    // End of variables declaration//GEN-END:variables
}
